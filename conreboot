#!/bin/bash
#################################################
## conreboot - A Conditional Reboot Service
## https://github.com/MSU-Libraries/conreboot
##
## Copyright (c) 2020 Michigan State University Board of Trustees
## Released under the MIT License
#################################################

SCRIPT_NAME=$( basename "$0" )
# shellcheck disable=SC2034
VERSION=0.2.4
CONFIG_FILE=/etc/conreboot.cfg
MANUAL_REBOOT_INDICATOR=/run/conreboot-scheduled
CONFIG_HASH_FILE=/run/conreboot.md5

command_help() {
    echo ""
    echo "Usage: $SCRIPT_NAME [FLAGS]"
    echo ""
    echo "A conditional rebooting client, used to control the conreboot service."
    echo " * For information on configuration, see:  man conreboot"
    echo ""
    echo "FLAGS:"
    echo "  -s | --status"
    echo "      Display the current status of the conreboot service and also the current"
    echo "      system status versus conditions required before a reboot would be initiated."
    echo "  -m | --manual"
    echo "      Schedule a manual reboot for soon as conditions will allow, even if the"
    echo "      system does not indicate a need to reboot currently."
    echo "  -c | --cancel"
    echo "      Cancel any manual reboot that was queued."
    echo "  -d | --daemon"
    echo "      Start up the daemon instance of conreboot which actually monitors"
    echo "      system state and will issue reboot commands."
    echo "  -f | --config"
    echo "      Specify an alternate config file. Default: $CONFIG_FILE"
    echo "  -h | --help"
    echo "      Display this message."
    echo ""
}

if [[ -z "$1" || $1 == "-h" || $1 == "--help" || $1 == "help" ]]; then
    command_help
    exit 0
fi

## Colors
CLR_RED='\033[0;31m'
CLR_ORANGE='\033[0;33m'
CLR_GREEN='\033[0;32m'
CLR_BLUE='\033[1;34m'
CLR_YELLOW='\033[1;33m'
CLR_PURPLE='\033[0;35m'
CLR_CYAN='\033[0;36m'
CLR_WHITE='\033[1;37m'
CLR_RESET='\033[0m'

#######################################
## Is this a mock run (pre-shutdown scripts aren't run, no reboot will occur).
##    MOCK=1 conreboot [FLAGS]
mock_run() {
    [[ "$MOCK" -eq 1 ]]
    return $?
}

#######################################
## Debug messages only displayed if DEBUG is set.
##    DEBUG=1 conreboot [FLAGS]
_debug() {
    if [[ $DEBUG -eq 1 ]]; then
        PREFIX=
        if mock_run; then PREFIX="Mock: "; fi
        1>&2 echo "${PREFIX}$*"
    fi
}

#######################################
## PARSE ARGUMENTS
#######################################
parse_args() {
    declare -g CONFIG_FILE
    declare -g -A ARGS
    ARGS[STATUS]=0
    ARGS[MANUAL]=0
    ARGS[DAEMON]=0
    ARGS[CANCEL]=0

    while [[ $# -gt 0 ]]; do
        case "$1" in
        -s|--status)
            ARGS[STATUS]=1
            shift
            ;;
        -m|--manual)
            ARGS[MANUAL]=1
            shift
            ;;
        -c|--cancel)
            ARGS[CANCEL]=1
            shift
            ;;
        -d|--daemon)
            ARGS[DAEMON]=1
            shift
            ;;
        -f|--config)
            ARG_CONFIG=$( readlink -f "$2" 2> /dev/null )
            if [[ ! -f "$ARG_CONFIG" || ! -r "$ARG_CONFIG" ]]; then
                echo -e "${CLR_RED}FAILURE${CLR_RESET}: Could not read from: $ARG_CONFIG"
                exit 1
            fi
            CONFIG_FILE="$ARG_CONFIG"
            shift
            shift
            ;;
        -h|--help)
            command_help
            exit 0
            ;;
        *)
            echo "Unknown argument: ${1}"
            exit 1
            ;;
        esac
    done

    for ARG in "${!ARGS[@]}"; do
        _debug "$ARG=${ARGS[$ARG]}"
    done
    _debug "CONFIG_FILE: $CONFIG_FILE"
    # Check flags, issue failure if multiple
    FLAGS_CNT=0
    for ARG in "${ARGS[@]}"; do
        FLAGS_CNT=$(( FLAGS_CNT + ARG ))
    done
    if [[ $FLAGS_CNT -ne 1 ]]; then
        echo -e "${CLR_RED}FAILURE${CLR_RESET}: Only one flag allow from: status,manual,cancel,daemon "
        exit 1
    fi
}

###############################
## Output a string to indicate the OS family of the current
## system if this system family is compatible with conreboot
## Prints "unknown" if not found or not compatible.
get_distro_family() {
    eval "$( grep -E '^(ID|ID_LIKE)' /etc/os-release )"
    # shellcheck disable=SC2034
    FAMILIES=("${ID}" "${ID_LIKE}")
    COMPAT_FAMILIES=(debian rhel)
    for COMPAT in "${COMPAT_FAMILIES[@]}"; do
        if array_contains FAMILIES "${COMPAT}"; then
            echo "${COMPAT}"
            return
        fi
    done
    echo "unknown"
}

###############################
## Creates an array of config variables with default values
default_config() {
    declare -g -a CONFIG_KEYS=(
        REBOOT_TIMES
        SHUTDOWN_TIME
        PREVENT_NOLOGIN
        UPDATE_MOTD
        PREVENT_WHEN_PROCESS
        PREVENT_ACTIVE_USER_MINUTES
        PREVENT_IF_SCRIPT_FAILS
        PRE_SHUTDOWN_COMMAND
    )
    # shellcheck disable=SC2034
    declare -g -a ALLOW_MULTI=(
        PREVENT_WHEN_PROCESS
        PREVENT_IF_SCRIPT_FAILS
        PRE_SHUTDOWN_COMMAND
    )
    declare -g REBOOT_TIMES=never
    declare -g SHUTDOWN_TIME="+1"
    declare -g PREVENT_NOLOGIN=0
    declare -g UPDATE_MOTD=0
    declare -g -a PREVENT_WHEN_PROCESS=()
    declare -g PREVENT_ACTIVE_USER_MINUTES=60
    declare -g -a PREVENT_IF_SCRIPT_FAILS=()
    declare -g -a PRE_SHUTDOWN_COMMAND=()
}

###############################
## Parse a value for a given config line, returning all matches, one per line
##  $1 -> File to search
##  $2 -> Name of parameter to get value for
## Prints the string value, or empty string if not found.
## If multiple matching parameters exist, only the last defined is output.
config_param_get_all() {
    grep -E "^ *$2 *=" "$1" | cut -d= -f2- | sed 's/ *$//' | sed 's/^ *//'
}

###############################
## Check if array contains a given value
##  $1 -> Name of array to search
##  $2 -> Value to find
## Returns 0 if an element matches the value to find
array_contains() {
    local ARRNAME="$1[@]"
    local NEEDLE="$2"
    for HAY in "${!ARRNAME}"; do
        if [[ "$NEEDLE" == "$HAY" ]]; then
            return 0
        fi
    done
    return 1
}

config_hash() {
    md5sum "$CONFIG_FILE" | awk '{ print $1 }'
}

daemon_config_hash() {
    cat "$CONFIG_HASH_FILE" 2> /dev/null
}

###############################
## Parse config file given
## Returns 0 on success, 1 on error
## Any errors will be in PARSE_ERRORS
parse_config() {
    declare -a PARSE_ERRORS
    default_config

    _debug "Attempting load of config: ${CONFIG_FILE}"
    # Verify config file exists and is readable
    if [[ ! -f $CONFIG_FILE || ! -r $CONFIG_FILE ]]; then
        PARSE_ERRORS+=("Config file doesn't exist or isn't readable.")
    else
        # Parse config file for variables
        for KEY in "${CONFIG_KEYS[@]}"; do
            # Get variable values from config file
            while read -r CONFIG_VALUE; do
                if [[ -z "$CONFIG_VALUE" ]]; then
                    continue
                fi
                if array_contains ALLOW_MULTI "$KEY"; then
                    UPDATE_CVAR="${KEY}+=(${CONFIG_VALUE})"
                else
                    UPDATE_CVAR="${KEY}=${CONFIG_VALUE}"
                fi

                eval "$UPDATE_CVAR"
                _debug "Loaded from config: $UPDATE_CVAR"
            done < <( config_param_get_all "$CONFIG_FILE" "$KEY" )
            # If key is allowed to have an empty value, then do not set the default value
        done
    fi

    if [[ "${#PARSE_ERRORS[@]}" -ne 0 ]]; then
        echo -e "${CLR_RED}FAILURE${CLR_RESET}: Could not parse config file: $CONFIG_FILE"
        for PARSE_MSG in "${PARSE_ERRORS[@]}"; do
            echo "$PARSE_MSG"
        done
        exit 1
    fi
}

#######################################
## REBOOT STATUS
#######################################

SCHEDULED_SHUTDOWN=/run/systemd/shutdown/scheduled

has_pending_shutdown() {
    [[ -f "$SCHEDULED_SHUTDOWN" ]]
    return $?
}

has_pending_reboot() {
    has_pending_shutdown && grep -q "MODE=reboot" "$SCHEDULED_SHUTDOWN"
    return $?
}

display_shutdown_time() {
    # shellcheck source=/dev/null
    source "$SCHEDULED_SHUTDOWN" 2> /dev/null
    UNIXTIME="${USEC::-6}"
    date "--date=@$UNIXTIME"
}

clear_motd_tag() {
    MOTD_TAG="$1"
    MSG_PREFIX="conreboot-${MOTD_TAG}:"
    if grep -q "^${MSG_PREFIX}" /etc/motd 2> /dev/null; then
        sed -i "/^conreboot-${MOTD_TAG}:/d" /etc/motd
    fi
}

clear_motd() {
    clear_motd_tag "active"
    clear_motd_tag "waiting"
}

set_motd_tag() {
    MOTD_TAG="$1"
    MOTD_MSG="$2"
    FULL_MSG="conreboot-${MOTD_TAG}: ${MOTD_MSG}"
    if grep -q "^${FULL_MSG}$" /etc/motd 2> /dev/null; then
        return
    fi
    clear_motd_tag "$MOTD_TAG"
    echo "$FULL_MSG" >> /etc/motd
}

update_motd() {
    if [[ "$UPDATE_MOTD" -eq 1 ]]; then
        if has_pending_reboot; then
            set_motd_tag "active" "A reboot is scheduled for $( display_shutdown_time )"
        elif has_pending_shutdown; then
            set_motd_tag "active" "A shutdown is scheduled for $( display_shutdown_time )"
        elif ( need_to_reboot || queued_reboot ); then
            set_motd_tag "waiting" "A reboot is pending. Reboot window(s): ${REBOOT_TIMES}"
        else
            clear_motd
        fi
    fi
}

#######################################
## REBOOT TEST CONDITIONS
#######################################

declare -r TIME_REGEX="([0-9]{1,2})(:([0-9]{2}))?([ap])m"

time_to_minutes() {
    local HOURS MINUTES AFTERNOON

    if ! [[ $1 =~ ^$TIME_REGEX$ ]]; then
        echo "Bad time: ${1@Q}" >&2
        exit 1
    fi

    HOURS=${BASH_REMATCH[1]}
    ((HOURS == 12)) && HOURS=0
    MINUTES=${BASH_REMATCH[3]:-0}
    AFTERNOON=$( [[ ${BASH_REMATCH[4]} == p ]] && echo 12 || echo 0 )

    echo $((60 * HOURS + 60 * AFTERNOON + MINUTES))
}

is_reboot_time() {
    if no_reboot_times; then return 1; fi
    local TIME_PERIODS PERIOD RANGE_START RANGE_END NOW
    IS_REBOOT_TIME=1
    IFS=',' read -ra TIME_PERIODS <<< "${REBOOT_TIMES}"
    for PERIOD in "${TIME_PERIODS[@]}"; do
        if ! [[ $PERIOD =~ ^${TIME_REGEX}-${TIME_REGEX}$ ]]; then
            echo "Bad time period: ${PERIOD@Q}." >&2
            exit 1
        fi
        RANGE_START=$(time_to_minutes "${PERIOD%-*}")
        RANGE_END=$(time_to_minutes "${PERIOD#*-}")
        NOW=$(date "+%H * 60 + %M" | bc)
        if ((RANGE_START <= RANGE_END)); then
            ((RANGE_START <= NOW && NOW <= RANGE_END)) && IS_REBOOT_TIME=0
        else
            ((RANGE_START <= NOW || NOW <= RANGE_END)) && IS_REBOOT_TIME=0
        fi
    done
    _debug "Invalid reboot time? ${IS_REBOOT_TIME}"
    return ${IS_REBOOT_TIME}
}

no_prohibited_process() {
    PROC_FOUND=0
    for PWP in "${PREVENT_WHEN_PROCESS[@]}"; do
        if pgrep -f -- "${PWP}" > /dev/null; then
            _debug "Found prohibited process matching: $PROC"
            PROC_FOUND=1
            break
        fi
    done
    _debug "Prohibited processes? ${PROC_FOUND}"
    return ${PROC_FOUND}
}

no_active_users() {
    # Return nonzero if any login session has been active in less than PREVENT_ACTIVE_USER_MINUTES
    # Note that this does not count X11 sessions
    SELF_TTY=$( tty | sed 's,/dev/,,' );    # Exclude TTY executing this script
    who -s | awk '{ print $2 }' |
        grep -v "${SELF_TTY}" |
        (cd /dev && xargs -r -- stat -c %X --) |
        awk -v STALE=${PREVENT_ACTIVE_USER_MINUTES} -v NOW="$(date +%s)" '{ if ((NOW - $1) / 60 < STALE) exit 1; }'
    NO_ACTIVE_USERS=$?
    _debug "Active users? ${NO_ACTIVE_USERS}"
    return ${NO_ACTIVE_USERS}
}

check_prescript_success() {
    for PISF in "${PREVENT_IF_SCRIPT_FAILS[@]}"; do
        eval "${PISF}"
        SCRIPT_EXIT=$?
        if [[ "$SCRIPT_EXIT" -ne 0 ]]; then
            return "$SCRIPT_EXIT"
        fi
    done
}

need_to_reboot() {
    NEEDS_REBOOT=1
    FAMILY=$( get_distro_family )
    if [[ "${FAMILY}" == "debian" ]] && [[ -f "/run/reboot-required" || -f "/run/reboot-required.pkgs" ]]; then
        NEEDS_REBOOT=0
    elif [[ "${FAMILY}" == "rhel" ]] && ! needs-restarting -r; then
        NEEDS_REBOOT=0
    fi
    return $NEEDS_REBOOT
}

queued_reboot() {
    REBOOT_QUEUED=1
    if [[ -f "${MANUAL_REBOOT_INDICATOR}" ]]; then
        REBOOT_QUEUED=0
    fi
    return ${REBOOT_QUEUED}
}

#######################################
## REBOOT TRIGGER FUNCTIONS
#######################################
require_root() {
    if mock_run; then return; fi
    if [[ "$EUID" -ne 0 ]]; then
        echo -e "${CLR_YELLOW}NOTE${CLR_RESET}: The conreboot script requires you run as the root user."
        exit 1
    fi
}

config_is_root() {
    if mock_run; then return; fi
    if [[ ! -O "${CONFIG_FILE}" || ! -G "${CONFIG_FILE}" ]]; then
        echo -e "${CLR_RED}WARNING${CLR_RESET}: Config file must be owned and editable only by root user."
        exit 1
    fi
}

check_already_running() {
    SCRIPT_COUNT=$( pgrep -c -f "${SCRIPT_NAME} --daemon" )
    if [[ ${SCRIPT_COUNT} -gt 1 && ${ARGS[DAEMON]} -eq 1 ]]; then
        echo -e "${CLR_RED}FAILURE${CLR_RESET}: An instance of ${SCRIPT_NAME} daemon is already running."
        exit 1
    fi
}

warn_if_config_changed() {
    if [[ "$( config_hash )" != "$( daemon_config_hash )" ]]; then
        echo -e "${CLR_RED}WARNING${CLR_RESET}: Config file has changed. Restart conreboot service for changes to take effect."
    fi
}

no_reboot_times() {
    [[ -z "${REBOOT_TIMES}" || "${REBOOT_TIMES,,}" == "never" ]]
    return $?
}

check_reboot() {
    _debug "Checking if okay to issue reboot"
    if ( need_to_reboot || queued_reboot ) && \
        is_reboot_time && \
        no_prohibited_process && \
        no_active_users && \
        check_prescript_success && \
        ! has_pending_shutdown; then
            _debug "All reboot checks passed!"
            REBOOT_OKAY=1
    fi
}

remove_nologin() {
    if [[ "$PREVENT_NOLOGIN" -eq 1 && -f /etc/nologin ]]; then
        _debug "Removing /etc/nologin"
        rm /etc/nologin
    fi
}

dummy_sleep() {
    # Using read timeout to prevent ugly sleep processes
    # shellcheck disable=SC2015,SC2034,SC2162
    coproc read -t "$1" DUMMY && wait "$!" || true
}

daemon_loop() {
    declare -g REBOOT_OKAY=0
    check_reboot

    if has_pending_shutdown; then
        _debug "Monitoring scheduled shutdown"
        update_motd
    fi
    while has_pending_shutdown; do
        remove_nologin
        dummy_sleep 1 2> /dev/null
    done

    while [[ "${REBOOT_OKAY}" -eq 0 ]]; do
        _debug "Sleeping for 1 minute"
        update_motd
        dummy_sleep 60 2> /dev/null
        check_reboot
    done

    if [[ "${REBOOT_OKAY}" -eq 1 ]]; then
        do_pre_shutdown
        _debug "Initiating reboot command: shutdown -h ${SHUTDOWN_TIME}"
        echo -e "Scheduling reboot at time: ${SHUTDOWN_TIME}"
        do_shutdown
    fi
}

do_pre_shutdown() {
    for PSC in "${PRE_SHUTDOWN_COMMAND[@]}"; do
        _debug "Running pre-shutdown: ${PSC}"
        if mock_run; then continue; fi
        eval "${PSC}"
    done
}

do_shutdown() {
    _debug "shutdown -r ${SHUTDOWN_TIME}"
    if mock_run; then return; fi
    shutdown -r "${SHUTDOWN_TIME}"
}

cleanup_daemon() {
    rm -rf "$CONFIG_HASH_FILE"
    clear_motd
    exit 0
}

command_daemon() {
    # Skip if not daemon
    if ! [[ ${ARGS[DAEMON]} -eq 1 ]]; then
        return 0
    fi

    _debug "Starting conreboot as daemon"
    trap cleanup_daemon SIGINT SIGTERM
    config_hash > "$CONFIG_HASH_FILE"
    while true; do daemon_loop; done
}

command_status() {
    # Skip if not status
    if ! [[ ${ARGS[STATUS]} -eq 1 ]]; then
        return 0
    fi

    FAMILY=$( get_distro_family )
    if [[ ${FAMILY} == "unknown" ]]; then
        echo -e "${CLR_RED}FAILURE${CLR_RESET}: Incompatible Linux distro family."
        exit 1
    fi

    if [[ ${FAMILY} == "debian" ]]; then
        if ! dpkg -l update-notifier-common > /dev/null 2>&1; then
            echo -e "${CLR_RED}FAILURE${CLR_RESET}: Debian/Ubuntu conreboot requires the update-notifier-common package to be installed."
            exit 1
        fi
    elif [[ ${FAMILY} == "rhel" ]]; then
        if ! rpm -q yum-utils > /dev/null 2>&1; then
            echo -e "${CLR_RED}FAILURE${CLR_RESET}: RHEL/Rocky conreboot requires the yum-utils package to be installed."
            exit 1
        fi
    fi

    warn_if_config_changed
    if no_reboot_times; then
        echo -e "${CLR_RED}WARNING${CLR_RESET}: Allowed reboot time is 'never' or empty for this host."
    fi

    STATE_TRUE="${CLR_GREEN}True${CLR_RESET}"
    STATE_FALSE="${CLR_ORANGE}False${CLR_RESET}"

    DAEMON_PID=$( systemctl show --property MainPID --value conreboot )
    echo -e "Is Daemon Running:           $( [[ ${DAEMON_PID} -ne 0 ]] && echo "$STATE_TRUE" || echo "$STATE_FALSE" )"
    if [[ "${DAEMON_PID}" -ne 0 ]]; then
        echo -e "Daemon PID:                  ${DAEMON_PID}"
    fi
    echo -e "Needs System Reboot:         $( need_to_reboot && echo "$STATE_TRUE" || echo "$STATE_FALSE" )"
    echo -e "Manual Reboot Queued:        $( queued_reboot && echo "$STATE_TRUE" || echo "$STATE_FALSE" )"
    if has_pending_reboot; then
        echo -e "Scheduled reboot at:         ${CLR_RED}$( display_shutdown_time )${CLR_RESET}"
    elif has_pending_shutdown; then
        echo -e "Scheduled shutdown at:       ${CLR_RED}$( display_shutdown_time )${CLR_RESET}"
    fi
    echo -e "${CLR_WHITE}Conditions:${CLR_RESET}"
    echo -e "  ${CLR_CYAN}REBOOT_TIMES${CLR_RESET}"
    echo -e "    Value:      ${CLR_WHITE}${REBOOT_TIMES}${CLR_RESET}"
    echo -e "    Reboot Ok:  $( is_reboot_time && echo "$STATE_TRUE" || echo "$STATE_FALSE" )"
    echo -e "  ${CLR_CYAN}PREVENT_ACTIVE_USER_MINUTES${CLR_RESET}"
    echo -e "    Value:      ${CLR_WHITE}${PREVENT_ACTIVE_USER_MINUTES}${CLR_RESET}"
    echo -e "    Reboot Ok:  $( no_active_users && echo "$STATE_TRUE" || echo "$STATE_FALSE" ) ${CLR_PURPLE}(excluding your current session)${CLR_RESET}"
    echo -e "  ${CLR_CYAN}PREVENT_WHEN_PROCESS${CLR_RESET}"
    for PWP in "${PREVENT_WHEN_PROCESS[@]}"; do
        echo -e "    Value:      ${CLR_WHITE}${PWP}${CLR_RESET}"
    done
    if [[ "${#PREVENT_WHEN_PROCESS[@]}" -eq 0 ]]; then
        echo -e "    Value:      ${CLR_PURPLE}(empty)${CLR_RESET}"
    fi
    echo -e "    Reboot Ok:  $( no_prohibited_process && echo "$STATE_TRUE" || echo "$STATE_FALSE" )"
    echo -e "  ${CLR_CYAN}PREVENT_IF_SCRIPT_FAILS${CLR_RESET}"
    for PISF in "${PREVENT_IF_SCRIPT_FAILS[@]}"; do
        echo -e "    Value:      ${CLR_WHITE}${PISF}${CLR_RESET}"
    done
    if [[ "${#PREVENT_IF_SCRIPT_FAILS[@]}" -eq 0 ]]; then
        echo -e "    Value:      ${CLR_PURPLE}(empty)${CLR_RESET}"
    fi
    echo -e "    Reboot Ok:  $( check_prescript_success && echo "$STATE_TRUE" || echo "$STATE_FALSE" )"
}

command_manual() {
    # Skip if not manual flag
    if ! [[ ${ARGS[MANUAL]} -eq 1 ]]; then
        return 0
    fi

    warn_if_config_changed
    if no_reboot_times; then
        echo -e "${CLR_RED}WARNING${CLR_RESET}: Allowed reboot time is 'never' or empty for this host."
    fi

    DAEMON_PID=$( systemctl show --property MainPID --value conreboot )
    if [[ "${DAEMON_PID}" -eq 0 ]]; then
        echo -e "${CLR_RED}WARNING${CLR_RESET}: The conreboot daemon is not currently running."
    fi

    touch "${MANUAL_REBOOT_INDICATOR}"
    INDICATOR_CREATED=$?
    if [[ ${INDICATOR_CREATED} -eq 0 && ${DAEMON_PID} -ne 0 ]]; then
        echo -e "${CLR_GREEN}SUCCESS${CLR_RESET}: Manual reboot scheduled."
    elif [[ ${INDICATOR_CREATED} -eq 0 && ${DAEMON_PID} -eq 0 ]]; then
        echo -e "${CLR_YELLOW}SUCCESS${CLR_RESET}: Manual reboot scheduled, but cannot occur while conreboot service is not running."
    else
        echo -e "${CLR_RED}FAILURE${CLR_RESET}: Unable to schedule a reboot."
    fi
}

command_cancel() {
    # Skip if not cancel
    if ! [[ ${ARGS[CANCEL]} -eq 1 ]]; then
        return 0
    fi

    warn_if_config_changed
    if [[ -f "${MANUAL_REBOOT_INDICATOR}" ]]; then
        if rm "${MANUAL_REBOOT_INDICATOR}"; then
            echo -e "${CLR_GREEN}SUCCESS${CLR_RESET}: A manually scheduled conreboot has been cancelled."
        else
            echo -e "${CLR_RED}FAILURE${CLR_RESET}: Unable to unset a scheduled conreboot."
            exit 1
        fi
    else
        echo -e "${CLR_BLUE}SKIPPED${CLR_RESET}: There is no manually scheuduled conreboot to stop."
    fi
    # Stop reboot if it was already scheduled
    if has_pending_reboot; then
        shutdown -c
    fi
}

#########################
## BEGIN RUNNING
#########################
_debug "Debug enabled"
require_root
parse_args "$@"
config_is_root
check_already_running
parse_config
command_status
command_manual
command_cancel
command_daemon
