#!/bin/bash
#######################################
## Conditional Reboot Service
#######################################
# Requires valid /etc/conreboot.cfg defined
# If config file is missing or invalid,
# nothing happens and script exits with code 1
#

VERSION=0.2.0
SCRIPT_NAME=$( basename $0 )

command_help() {
    echo ""
    echo "Usage: $SCRIPT_NAME [FLAGS]"
    echo ""
    echo "A conditional rebooting client, used to control the conreboot service."
    echo " * For information on configuring, see:   man conreboot.cfg"
    echo " * For more information on use, see:      man conreboot"
    echo ""
    echo "FLAGS:"
    echo "  -s | --status"
    echo "      Display the current status of the conreboot service and also the current"
    echo "      system status versus conditions required before a reboot would be initiated."
    echo "  -m | --manual"
    echo "      Schedule a manual reboot for soon as conditions will allow, even if the"
    echo "      system does not indicate a need to reboot currently."
    echo "  -c | --cancel"
    echo "      Cancel any manual reboot that was queued."
    echo "  -d | --daemon"
    echo "      Start up the daemon instance of conreboot which actually monitors"
    echo "      system state and will issue reboot commands."
    echo "  -h | --help"
    echo "      Display this message."
    echo ""
}

## Paths
CONFIG_FILE=/etc/conreboot.cfg
MANUAL_REBOOT_INDICATOR=/run/conreboot-scheduled

## Colors
CLR_RED='\033[0;31m'
CLR_ORANGE='\033[0;33m'
CLR_GREEN='\033[0;32m'
CLR_BLUE='\033[1;34m'
CLR_YELLOW='\033[1;33m'
CLR_PURPLE='\033[0;35m'
CLR_CYAN='\033[0;36m'
CLR_GRAY='\033[0;37m'
CLR_WHITE='\033[1;37m'
CLR_RESET='\033[0m'

#######################################
## Enable debug messages by setting DEBUG. E.g.
##    DEBUG=1 conreboot
_debug() {
    if [[ $DEBUG -eq 1 ]]; then
        1>&2 echo "$@"
    fi
}

#######################################
## PARSE ARGUMENTS
#######################################
parse_args() {
    declare -g CONFIG_FILE
    declare -g -A ARGS
    ARGS[STATUS]=0
    ARGS[MANUAL]=0
    ARGS[DAEMON]=0
    ARGS[CANCEL]=0

    PARSED=$( getopt -n conreboot -o smhdc --longoptions status,manual,help,daemon,cancel -- "$@" )
    PARSE_OKAY=$?
    if [ "${PARSE_OKAY}" -ne 0 ]; then
      command_help
      exit 1
    fi

    _debug "Parsed flags: ${PARSED}"
    eval set -- "${PARSED}"
    while test $# -gt 0; do
      case "${1}" in
        -s|--status)
          ARGS[STATUS]=1
          shift
          ;;
        -m|--manual)
          ARGS[MANUAL]=1
          shift
          ;;
        -c|--cancel)
          ARGS[CANCEL]=1
          shift
          ;;
        -d|--daemon)
          ARGS[DAEMON]=1
          shift
          ;;
        -h|--help)
          command_help
          exit 0
          ;;
        --)
          shift
          break
          ;;
        *)
          echo "Unknown argument: ${1}"
          exit 1
          ;;
      esac
    done

    # Check if no flags; if none, then display help
    FLAGS_CNT=0
    for ARG in ${ARGS[@]}; do
        FLAGS_CNT=$(( FLAGS_CNT + ARG ))
    done
    if [[ $FLAGS_CNT -eq 0 ]]; then
        command_help
        exit 0
    fi
}

###############################
## Output a string to indicate the OS family of the current
## system if this system family is compatible with conreboot
## Prints "unknown" if not found or not compatible.
get_distro_family() {
    eval $( grep -E '^(ID|ID_LIKE)' /etc/os-release )
    FAMILIES=(${ID} ${ID_LIKE})
    COMPAT_FAMILIES=(debian rhel)
    for COMPAT in "${COMPAT_FAMILIES[@]}"; do
        if array_contains FAMILIES "${COMPAT}"; then
            echo "${COMPAT}"
            return
        fi
    done
    echo "unknown"
}

#######################################
## PARSE CONFIG FILE
#######################################
## Credit: Config file parsing and loading derived from cfgbackup
## Source: https://github.com/natecollins/cfgbackup
## Licence: MIT

###############################
## Creates an array of config variables with default values
default_config() {
    declare -g -A CONFIG
    CONFIG[REBOOT_TIMES]=never
    CONFIG[PREVENT_PROCESSES]=
    CONFIG[PREVENT_ACTIVE_USER_MINUTES]=60
    CONFIG[PREVENT_IF_SCRIPT_FAILS]=
    CONFIG[SHUTDOWN_TIME]="+1"
    CONFIG[PRE_SHUTDOWN_COMMAND]=
}

###############################
## Parse a value for a given config line
##  $1 -> File to search
##  $2 -> Name of parameter to get value for
## Prints the string value, or empty string if not found.
## If multiple matching parameters exist, only the last defined is output.
config_param_get() {
    grep -E "^ *$2 *=" $1 | tail -n 1 | cut -d= -f2- | sed 's/ *$//' | sed 's/^ *//'
}
###############################
# Same as config_param_get, but returns all matching parameters, one per line
config_param_get_all() {
    grep -E "^ *$2 *=" $1 | cut -d= -f2- | sed 's/ *$//' | sed 's/^ *//'
}

###############################
## Parse config to check if a given parameter exists
##  $1 -> File to search
##  $2 -> Name of parameter to get value for
## Returns 0 if the parameter exists in the file, 1 if it does not
config_param_exists() {
    PARAM_FOUND=$( grep -E "^ *$2 *=" $1 )
    if [[ $PARAM_FOUND != "" ]]; then
        return 0
    fi
    return 1
}

###############################
## Check if array contains a given value
##  $1 -> Name of array to search
##  $2 -> Value to find
## Returns 0 if an element matches the value to find
array_contains() {
    local ARRNAME=$1[@]
    local HAYSTACK=( ${!ARRNAME} )
    local NEEDLE="$2"
    for VAL in "${HAYSTACK[@]}"; do
        if [[ $NEEDLE == $VAL ]]; then
            return 0
        fi
    done
    return 1
}

###############################
## Parse config file given
## Returns 0 on success, 1 on error
## Any errors will be in PARSE_ERRORS
parse_config() {
    declare -a PARSE_ERRORS
    default_config
    # Setting these to empty is allowed and the empty value will override the default value
    ALLOWED_EMPTY=( PREVENT_PROCESSES PRE_SHUTDOWN_COMMAND )

    _debug "Attempting load of config: ${CONFIG_FILE}"
    # Verify config file exists and is readable
    if [[ ! -f $CONFIG_FILE || ! -r $CONFIG_FILE ]]; then
        PARSE_ERRORS+=("Config file doesn't exist or isn't readable.")
    else
        # Parse config file for variables
        for KEY in "${!CONFIG[@]}"; do
            # Get variable values from config file
            CONFIG_VALUE=$(config_param_get $CONFIG_FILE $KEY)
            # If key is allowed to have an empty value, then do not set the default value
            if array_contains ALLOWED_EMPTY "$KEY" && config_param_exists $CONFIG_FILE $KEY; then
                : # do nothing
            # If value is empty, leave as default
            elif [[ $CONFIG_VALUE == "" ]]; then
                CONFIG_VALUE=${CONFIG[$KEY]}
            fi
            # Update CONFIG values
            CONFIG[$KEY]=$CONFIG_VALUE

            _debug "Loaded from config: ${KEY}=${CONFIG_VALUE}"
        done
    fi

    if [[ ${#PARSE_ERRORS[@]} -ne 0 ]]; then
        echo -e "${CLR_RED}FAILURE${CLR_RESET}: Could not parse config file: $CONFIG_FILE"
        for PARSE_MSG in "${PARSE_ERRORS[@]}"; do
            echo $PARSE_MSG
        done
        exit 1
    fi
}

#######################################
## REBOOT TEST CONDITIONS
#######################################

declare -r TIME_REGEX="([0-9]{1,2})(:([0-9]{2}))?([ap])m"

time_to_minutes() {
    local HOURS MINUTES AFTERNOON

    if ! [[ $1 =~ ^$TIME_REGEX$ ]]; then
        echo "Bad time: ${1@Q}" >&2
        exit 1
    fi

    HOURS=${BASH_REMATCH[1]}
    ((HOURS == 12)) && HOURS=0
    MINUTES=${BASH_REMATCH[3]:-0}
    AFTERNOON=$([[ ${BASH_REMATCH[4]} == p ]] && echo 12 || echo 0)

    echo $((60 * HOURS + 60 * AFTERNOON + MINUTES))
}

is_reboot_time() {
    local TIME_PERIODS PERIOD RANGE_START RANGE_END NOW
    IS_REBOOT_TIME=1
    IFS=',' read -ra TIME_PERIODS <<< "${CONFIG[REBOOT_TIMES]}"
    for PERIOD in "${TIME_PERIODS[@]}"; do
        if ! [[ $PERIOD =~ ^${TIME_REGEX}-${TIME_REGEX}$ ]]; then
            echo "Bad time period: ${PERIOD@Q}." >&2
            exit 1
        fi
        RANGE_START=$(time_to_minutes "${PERIOD%-*}")
        RANGE_END=$(time_to_minutes "${PERIOD#*-}")
        NOW=$(date "+%H * 60 + %M" | bc)
        if ((RANGE_START <= RANGE_END)); then
            ((RANGE_START <= NOW && NOW <= RANGE_END)) && IS_REBOOT_TIME=0
        else
            ((RANGE_START <= NOW || NOW <= RANGE_END)) && IS_REBOOT_TIME=0
        fi
    done
    _debug "Invalid reboot time? ${IS_REBOOT_TIME}"
    return ${IS_REBOOT_TIME}
}

no_prohibited_process() {
    PROC_FOUND=0
    while read -r CONF_LINE; do
        IFS=',' read -ra PROC_LIST <<< "${CONF_LINE}"
        for PROC in "${PROC_LIST[@]}"; do
            pgrep -f -- "${PROC}" > /dev/null
            if [[ $? -eq 0 ]]; then
                PROC_FOUND=1
                break 2
            fi
        done
    done < <( config_param_get_all "$CONFIG_FILE" "PREVENT_PROCESSES" )
    _debug "Prohibited processes? ${PROC_FOUND}"
    return ${PROC_FOUND}
}

no_active_users() {
    # Return nonzero if any login session has been active in less than PREVENT_ACTIVE_USER_MINUTES
    # Note that this does not count X11 sessions
    SELF_TTY=$( tty | sed 's,/dev/,,' );    # Exclude TTY executing this script
    who -s | awk '{ print $2 }' |
        grep -v "${SELF_TTY}" |
        (cd /dev && xargs -r -- stat -c %X --) |
        awk -v STALE=${CONFIG[PREVENT_ACTIVE_USER_MINUTES]} -v NOW="$(date +%s)" '{ if ((NOW - $1) / 60 < STALE) exit 1; }'
    NO_ACTIVE_USERS=$?
    _debug "Active users? ${NO_ACTIVE_USERS}"
    return ${NO_ACTIVE_USERS}
}

check_prescript_success() {
    SCRIPT_EXIT=0
    if ! [[ -z "${CONFIG[PREVENT_IF_SCRIPT_FAILS]}" ]]; then
        eval "${CONFIG[PREVENT_IF_SCRIPT_FAILS]}"
        # TODO add support for allowing multple prevent-if-script-fails parameters
        SCRIPT_EXIT=$?
    fi
    return ${SCRIPT_EXIT}
}

need_to_reboot() {
    NEEDS_REBOOT=1
    FAMILY=$( get_distro_family )
    if [[ "${FAMILY}" == "debian" ]] && [[ -f "/run/reboot-required" || -f "/run/reboot-required.pkgs" ]]; then
        NEEDS_REBOOT=0
    elif [[ "${FAMILY}" == "rhel" ]] && ! needs-restarting -r; then
        NEEDS_REBOOT=0
    fi
    return $NEEDS_REBOOT
}

queued_reboot() {
    REBOOT_QUEUED=1
    if [[ -f "${MANUAL_REBOOT_INDICATOR}" ]]; then
        REBOOT_QUEUED=0
    fi
    return ${REBOOT_QUEUED}
}

#######################################
## REBOOT TRIGGER FUNCTIONS
#######################################
require_root() {
    if [[ ${EUID} -ne 0 ]]; then
        echo -e "${CLR_YELLOW}NOTE${CLR_RESET}: The conreboot script requires you run as the root user."
        exit 1
    fi
}

config_is_root() {
    if [[ ! -O "${CONFIG_FILE}" || ! -G "${CONFIG_FILE}" ]]; then
        echo -e "${CLR_RED}WARNING${CLR_RESET}: Config file must be owned and editable only by root user."
        exit 1
    fi
}

check_already_running() {
    SCRIPT_COUNT=$( pgrep -c -f "${SCRIPT_NAME} --daemon" )
    if [[ ${SCRIPT_COUNT} -gt 1 && ${ARGS[DAEMON]} -eq 1 ]]; then
        echo -e "${CLR_RED}FAILURE${CLR_RESET}: An instance of ${SCRIPT_NAME} daemon is already running."
        exit 1
    fi
}

check_never_reboot() {
    if [[ "${CONFIG[REBOOT_TIMES],,}" == "never" ]]; then
        echo -e "Conditional rebooting is set to 'never' for this host."
        exit 0;
    fi
}

check_reboot() {
    _debug "Checking if okay to issue reboot"
    if  ( need_to_reboot || queued_reboot ) && \
        is_reboot_time && \
        no_prohibited_process && \
        no_active_users && \
        check_prescript_success; then
            _debug "All reboot checks passed!"
            REBOOT_OKAY=1
    fi
}

daemon_loop() {
    # Skip if not daemon
    if ! [[ ${ARGS[DAEMON]} -eq 1 ]]; then
        return 0
    fi

    _debug "Starting conreboot as daemon"
    declare -g REBOOT_OKAY
    REBOOT_OKAY=0
    check_reboot

    while [[ ${REBOOT_OKAY} -eq 0 ]]; do
        _debug "Sleeping for 1 minute"
        # Using read timeout to prevent ugly sleep processes
        coproc read -t 60 DUMMY && wait "$!" || true
        check_reboot
        # TODO if a reboot is needed/scheduled, add a temporary addition to MOTD indicating that a reboot is needed and when the reboot window is
        # TODO add a config setting to disable MOTD modifications
    done

    if [[ ${REBOOT_OKAY} -eq 1 ]]; then
        if ! [[ -z "${CONFIG[PRE_SHUTDOWN_COMMAND]}" ]]; then
            _debug "Running pre-shutdown: ${CONFIG[PRE_SHUTDOWN_COMMAND]}"
            # TODO allow multiple pre-shutdown-commands
            eval ${CONFIG[PRE_SHUTDOWN_COMMAND]}
        fi
        _debug "Initiating reboot command: shutdown -h ${CONFIG[SHUTDOWN_TIME]}"
        echo -e "Scheduling reboot at time: ${CONFIG[SHUTDOWN_TIME]}"
        shutdown -r ${CONFIG[SHUTDOWN_TIME]}
        # TODO remove /etc/nologin
        # TODO add a temporary addition to MOTD to indicate when the node is scheduled for a reboot, indicating the time it will happen
        # TODO add a config setting to disable MOTD modifications
    fi
    exit 0
}

command_status() {
    # Skip if not status
    if ! [[ ${ARGS[STATUS]} -eq 1 ]]; then
        return 0
    fi

    FAMILY=$( get_distro_family )
    if [[ ${FAMILY} == "unknown" ]]; then
        echo -e "${CLR_RED}FAILURE${CLR_RESET}: Incompatible Linux distro family."
        exit 1
    fi

    if [[ ${FAMILY} == "debian" ]]; then
        dpkg -l update-notifier 2> /dev/null 1> /dev/null
        if [[ $? -ne 0 ]]; then
            echo -e "${CLR_RED}FAILURE${CLR_RESET}: Debian/Ubuntu conreboot requires the update-notifier package to be installed."
            exit 1
        fi
    elif [[ ${FAMILY} == "rhel" ]]; then
        rpm -q yum-utils 2>&1 > /dev/null
        if [[ $? -ne 0 ]]; then
            echo -e "${CLR_RED}FAILURE${CLR_RESET}: RHEL/Rocky conreboot requires the yum-utils package to be installed."
            exit 1
        fi
    fi

    STATE_TRUE="${CLR_GREEN}True${CLR_RESET}"
    STATE_FALSE="${CLR_ORANGE}False${CLR_RESET}"

    DAEMON_PID=$( systemctl show --property MainPID --value conreboot )
    echo -e "Is conreboot Daemon Running:  $( [[ ${DAEMON_PID} -ne 0 ]] && echo "$STATE_TRUE" || echo "$STATE_FALSE" )"
    if [[ "${DAEMON_PID}" -ne 0 ]]; then
        echo -e "Daemon PID:                  ${DAEMON_PID}"
    fi
    echo -e "Needs System Reboot:         $( need_to_reboot && echo "$STATE_TRUE" || echo "$STATE_FALSE" )"
    echo -e "Manual Reboot Queued:        $( queued_reboot && echo "$STATE_TRUE" || echo "$STATE_FALSE" )"

    echo -e "${CLR_BLUE}CONDITIONS${CLR_RESET}"
    echo -e "  REBOOT_TIMES"
    echo -e "    Value:      ${CLR_WHITE}${CONFIG[REBOOT_TIMES]}${CLR_RESET}"
    echo -e "    Reboot Ok:  $( is_reboot_time && echo "$STATE_TRUE" || echo "$STATE_FALSE" )"
    echo -e "  PREVENT_ACTIVE_USER_MINUTES"
    echo -e "    Value:      ${CLR_WHITE}${CONFIG[PREVENT_ACTIVE_USER_MINUTES]}${CLR_RESET}"
    echo -e "    Reboot Ok:  $( no_active_users && echo "$STATE_TRUE" || echo "$STATE_FALSE" ) ${CLR_PURPLE}(excluding your current session)${CLR_RESET}"
    echo -e "  PREVENT_PROCESSES"
    echo -e "    Value:      ${CLR_WHITE}${CONFIG[PREVENT_PROCESSES]}${CLR_RESET}"
    echo -e "    Reboot Ok:  $( no_prohibited_process && echo "$STATE_TRUE" || echo "$STATE_FALSE" )"
    echo -e "  PREVENT_IF_SCRIPT_FAILS"
    echo -e "    Value:      ${CLR_WHITE}${CONFIG[PREVENT_IF_SCRIPT_FAILS]}${CLR_RESET}"
    echo -e "    Reboot Ok:  $( check_prescript_success && echo "$STATE_TRUE" || echo "$STATE_FALSE" )"
}

command_manual() {
    # Skip if not manual flag
    if ! [[ ${ARGS[MANUAL]} -eq 1 ]]; then
        return 0
    fi

    DAEMON_PID=$( systemctl show --property MainPID --value conreboot )
    if [[ "${DAEMON_PID}" -eq 0 ]]; then
        echo -e "${CLR_RED}WARNING${CLR_RESET}: The conreboot daemon is not currently running."
    fi

    touch "${MANUAL_REBOOT_INDICATOR}"
    INDICATOR_CREATED=$?
    if [[ ${INDICATOR_CREATED} -eq 0 && ${DAEMON_PID} -ne 0 ]]; then
        echo -e "${CLR_GREEN}SUCCESS${CLR_RESET}: Manual reboot scheduled."
    elif [[ ${INDICATOR_CREATED} -eq 0 && ${DAEMON_PID} -eq 0 ]]; then
        echo -e "${CLR_YELLOW}SUCCESS${CLR_RESET}: Manual reboot scheduled, but cannot occur while conreboot service is not running."
    else
        echo -e "${CLR_RED}FAILURE${CLR_RESET}: Unable to schedule a reboot."
    fi
}

command_cancel() {
    # Skip if not cancel
    if ! [[ ${ARGS[CANCEL]} -eq 1 ]]; then
        return 0
    fi

    if [[ -f "${MANUAL_REBOOT_INDICATOR}" ]]; then
        rm "${MANUAL_REBOOT_INDICATOR}"
        if [[ $? -eq 0 ]]; then
            echo -e "${CLR_GREEN}SUCCESS${CLR_RESET}: A manually scheduled conreboot has been cancelled."
        else
            echo -e "${CLR_RED}FAILURE${CLR_RESET}: Unable to unset a scheduled conreboot."
            exit 1
        fi
    else
        echo -e "${CLR_BLUE}SKIPPED${CLR_RESET}: There is no manually scheuduled conreboot to stop."
    fi
}

#########################
## BEGIN RUNNING
#########################
_debug "Debug enabled"
require_root
parse_args "$@"
config_is_root
check_already_running
parse_config
check_never_reboot
command_status
command_manual
command_cancel
daemon_loop
