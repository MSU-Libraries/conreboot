stages:
  - unittest_and_lint
  - tag
  - build_docs
  - build_release
  - make_release_gitlab
  - make_release_github

unittest_and_lint_job:
  stage: unittest_and_lint
  tags:
    - msul-shared
  allow_failure: false
  except:
    - tags
  before_script:
    - apk add shellcheck
  script:
    - shellcheck conreboot || true
    # TODO

tag_job:
  stage: tag
  tags:
    - msul-shared
  allow_failure: false
  when: manual
  only:
    - master
  except:
    - tags
  before_script:
    - apk add git
  script:
    # re-cloning to avoid runner cache
    - rm -rf clone/ || true
    - git clone https://gitlab-ci-token:$RW_CICD_TOKEN@gitlab.msu.edu/msu-libraries/systems/conreboot.git clone/
    - cd clone/
    - VERSION=$( grep -E "^ *VERSION *=" "conreboot" | tail -n1 | cut -d= -f2- | sed 's/ *$//' | sed 's/^ *//' )
    - RELEASE=$( git tag -l ${VERSION}* --sort=-v:refname | head -n 1 | cut -d'-' -f 2 )
    - '[ -z "$RELEASE" ] && RELEASE=-1'
    - RELEASE=$(( RELEASE + 1 ))
    - TAG="${VERSION}-${RELEASE}"
    - echo "TAG=$TAG" > ../variables.env
    - echo "VERSION=$VERSION" >> ../variables.env
    - echo "RELEASE=$RELEASE" >> ../variables.env
    - echo "Tagging with $TAG"
    - git tag $TAG
    - git push origin --tags
  artifacts:
    reports:
      dotenv: variables.env

build_docs_job:
  stage: build_docs
  tags:
    - msul-shared
  image: python:3.10
  only:
    - master
  except:
    - tags
  script:
    - pip install -r requirements.txt
    - mkdocs build --site-dir public
  artifacts:
    paths:
      - public
    expire_in: 1 week

build_release_job:
  stage: build_release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  tags:
    - msul-shared
  only:
    - master
  needs:
    - job: build_docs_job
    - job: tag_job
      artifacts: true
  before_script:
    - apk add bash jq curl binutils findutils fakeroot gettext gzip
  script:
    - 'build/package-deb.sh -n "Nathan Collins" -e "colli372@msu.edu" -r "$RELEASE" -y'
    - 'DEB_FILE=$( build/package-deb.sh -n "Nathan Collins" -e "colli372@msu.edu" -r "$RELEASE" -q )'
    - 'mkdir dist/'
    - 'mv $DEB_FILE ./dist/'
    - 'DEB_FILE=$( basename $DEB_FILE )'
    - 'echo "Built .deb: $DEB_FILE"'
    - 'DEB_UPLOAD_RESP=$( curl --request POST --header "PRIVATE-TOKEN: $RW_CICD_TOKEN" --form "file=@dist/${DEB_FILE}" "https://gitlab.msu.edu/api/v4/projects/$CI_PROJECT_ID/uploads" )'
    - 'echo "Upload .deb response: $DEB_UPLOAD_RESP"'
    - 'DEB_PKG_URL=$( echo "$DEB_UPLOAD_RESP" | jq -r ".full_path" )'
    - 'DEB_PKG_FILE=$( basename $DEB_PKG_URL )'
    - 'echo ".deb file uploaded to: ${DEB_PKG_URL}"'
    - echo "TAG=${TAG}" > assets.env
    - echo "DEB_FILE=${DEB_FILE}" >> assets.env
    - echo "DEB_PKG_URL=${DEB_PKG_URL}" >> assets.env
    - echo "DEB_PKG_FILE=${DEB_PKG_FILE}" >> assets.env
  artifacts:
    reports:
      dotenv: assets.env
    paths:
      - "dist/"
    expire_in: 1 week

make_release_gitlab_job:
  stage: make_release_gitlab
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  tags:
    - msul-shared
  only:
    - master
  needs:
    - job: build_release_job
      artifacts: true
  script:
    - echo "Making release $TAG"
  release:
    tag_name: '$TAG'
    description: 'Release $TAG'
    assets:
      links:
        - name: '${DEB_PKG_FILE}'
          url: 'https://gitlab.msu.edu${DEB_PKG_URL}'

update_github_job:
  stage: make_release_github
  tags:
    - msul-shared
  image: alpine:latest
  when: manual
  only:
    - master
  except:
    - tags
  before_script:
    - apk add git curl
  script:
    # Update GitHub code
    - rm -rf conreboot.git
    - git clone --mirror https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.msu.edu/msu-libraries/systems/conreboot.git
    - cd conreboot.git
    # This will trigger the GitHub CI which builds the MkDocs into the gh-pages branch
    - git push --force --mirror https://${GITHUB_USER_TOKEN}@github.com/MSU-Libraries/conreboot.git
    - sleep 120 # Needs time to propagate the changes first or this next step will fail
    # Next we have to re-configure the Pages settings to set gh-pages as the branch again
    - echo '{"build_type":"legacy","source":{"branch":"gh-pages","path":"/"}' > data.json
    - "curl -X POST -H 'Accept: application/vnd.github+json' -u ${GITHUB_USER_TOKEN} https://api.github.com/repos/MSU-Libraries/conreboot/pages -d '@data.json'"

make_release_github_job:
  stage: make_release_github
  tags:
    - msul-shared
  image: alpine:latest
  only:
    - master
  except:
    - tags
  needs:
    - job: update_github_job
    - job: build_release_job
      artifacts: true
  before_script:
    - apk add curl jq
  script:
    # Assets
    - 'echo "Contents of dist/"'
    - 'ls -l dist/'
    # Create release using TAG
    - "echo '{\"tag_name\":\"${TAG}\",\"name\":\"v${TAG}\",\"body\":\"Release ${TAG}\",\"draft\":false,\"prerelease\":false,\"generate_release_notes\":false}' > data.json"
    - 'echo "data.json: $( cat data.json )"'
    - "GH_JSON=$( curl -L -X POST -H 'Accept: application/vnd.github+json' -u ${GITHUB_USER_TOKEN} -H 'X-GitHub-Api-Version: 2022-11-28' https://api.github.com/repos/MSU-Libraries/conreboot/releases -d '@data.json' )"
    - 'echo "GitHub Response: $GH_JSON"'
    - 'RELEASE_ID=$( echo "$GH_JSON" | jq -r ".id" )'
    - 'echo "Created release id: $RELEASE_ID"'
    # Upload package as asset on the release
    - "GH_JSON=$( curl -L -X POST -H 'Accept: application/vnd.github+json' -u ${GITHUB_USER_TOKEN} -H 'X-GitHub-Api-Version: 2022-11-28' -H 'Content-Type: application/octet-stream' https://uploads.github.com/repos/MSU-Libraries/conreboot/releases/${RELEASE_ID}/assets?name=${DEB_FILE} --data-binary '@dist/${DEB_FILE}' )"
    - 'echo "GitHub Response: $GH_JSON"'
