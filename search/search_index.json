{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"conreboot - A Conditional Rebooter","text":"<p>Triggers a reboot on a Linux system when preset conditions are met. The primary condition is that the server indicates that it needs to be rebooted. Other conditions are defined in a config file on the server.  </p> <p></p>"},{"location":"#dependencies","title":"Dependencies","text":"<ul> <li>bash</li> <li>systemd</li> <li>awk</li> <li>bc</li> <li>update-notifier-common (Debian/Ubnutu)</li> <li>yum-utils/dnf-utils (RHEL/Rocky)</li> </ul>"},{"location":"#the-reboot","title":"The Reboot","text":"<p>The <code>conreboot</code> service will reboot the server via a <code>shutdown -r</code> command when the server indicates that it requires a restart (due to package/kernel upgrades) or if the administrator issues a manually scheduled reboot to occur. In addtion to this, the <code>conreboot</code> service checks the config file to ensure those conditions also match, for example at what time is it safe to reboot.  </p>"},{"location":"#the-command","title":"The Command","text":"<p>The <code>conreboot</code> command is central to the service. It has the following flags:  </p> <ul> <li><code>--help/-h</code> Display help about the flags.</li> <li><code>--status/-s</code> Display status of conreboot service, if any reboot is pending, and status of each condition that must happen before a reboot could happen.</li> <li><code>--manual/-m</code> Schedule a manual conreboot to happen as soon as all conditions are safe, even if the server does not indicate the need to reboot.</li> <li><code>--cancel/-c</code> Cancel a scheduled manual conreboot.</li> <li><code>--daemon/-d</code> Start as a conreboot daemon; used by the systemd service unit.</li> <li><code>--config/-f FILE</code> Use alternate <code>FILE</code> instead of default config file.</li> </ul>"},{"location":"#the-config-file","title":"The Config File","text":"<p>Each host machine the conditional reboot script will be run on must have a config file setup or the script will do nothing and exit.  </p> <p>The default config location is at: <code>/etc/conreboot.cfg</code>.  </p> <p>Changes to the config file will not take effect until the <code>conreboot</code> service is restarted.  </p> <p>The config has following settings:  </p> <ul> <li><code>REBOOT_TIMES</code></li> <li><code>SHUTDOWN_TIME</code></li> <li><code>PREVENT_NOLOGIN</code></li> <li><code>UPDATE_MOTD</code></li> <li><code>BROADCAST_REBOOT</code></li> <li><code>PREVENT_ACTIVE_USER_MINUTES</code></li> <li><code>PREVENT_WHEN_PROCESS</code> (multiples allowed)</li> <li><code>PREVENT_IF_SCRIPT_FAILS</code> (multiples allowed)</li> <li><code>PRE_SHUTDOWN_COMMAND</code> (multiples allowed)</li> </ul>"},{"location":"#reboot_times","title":"REBOOT_TIMES","text":"<p>Default value: <code>never</code> This sets the allowed times when a reboot can occur. Format is a comma-delimited list of time ranges. Times are in the format such as <code>3am-7:30am</code> or <code>11:30pm-2:30am</code> When set to <code>never</code>, <code>conreboot</code> will not trigger a reboot.  </p> <pre><code>REBOOT_TIMES=12pm-6am\nREBOOT_TIMES=10pm-1am,4:30am-6am\nREBOOT_TIMES=never\n</code></pre>"},{"location":"#shutdown_time","title":"SHUTDOWN_TIME","text":"<p>Default: <code>+1</code> Sets the TIME argument to the <code>shutdown</code> command. Default is 1 minute warning before shutdown commences. Setting to <code>+0</code> or <code>now</code> will result in immediate shutdown once it is determined to be okay to reboot.  </p> <pre><code>SHUTDOWN_TIME=now\nSHUTDOWN_TIME=+5\n</code></pre>"},{"location":"#prevent_nologin","title":"PREVENT_NOLOGIN","text":"<p>Default: <code>0</code> When rebooting with a SHUTDOWN_TIME that is not immediate, the system will prevent new logins within the last 5 minutes before reboot. Setting this config setting to 1 will have conreboot remove the /etc/nologin or /var/run/nologin file which normally would prevent those logins.</p> <pre><code>PREVENT_NOLOGIN=1\n</code></pre>"},{"location":"#update_motd","title":"UPDATE_MOTD","text":"<p>Default: <code>0</code> Setting this value to 1 will have conreboot add messages into the login message-of-the-day when a reboot in needed, or if a reboot is actively scheuduled.</p> <pre><code>UPDATE_MOTD=1\n</code></pre>"},{"location":"#broadcast_reboot","title":"BROADCAST_REBOOT","text":"<p>Default: <code>1</code> Setting this value to 0 will suppress the periodic broadcast <code>wall</code> messages sent to logged in users once a reboot is scheduled. Effectively, when set to a non-<code>1</code> value, the <code>--no-wall</code> flag will be passed to the <code>shutdown</code> command.</p> <pre><code>BROADCAST_REBOOT=0\n</code></pre>"},{"location":"#prevent_active_user_minutes","title":"PREVENT_ACTIVE_USER_MINUTES","text":"<p>Default: <code>60</code> Prevent reboot if there are active users logged in, where an active user is those who have terminal activity with the given number of minutes. Set to 0 to allow rebooting while users are active. Note that this does not count X11 sessions.  </p> <pre><code>PREVENT_ACTIVE_USER_MINUTES=120\nPREVENT_ACTIVE_USER_MINUTES=0\n</code></pre>"},{"location":"#prevent_when_process","title":"PREVENT_WHEN_PROCESS","text":"<p>Default: nothing Prevent reboot if the listed process is running. This can list just the process or the process with flags. Multiple definitions are allowed.  </p> <pre><code>PREVENT_WHEN_PROCESS=mysqldump\nPREVENT_WHEN_PROCESS=rsync -av --del /var/\n</code></pre>"},{"location":"#prevent_if_script_fails","title":"PREVENT_IF_SCRIPT_FAILS","text":"<p>Default: nothing Prevent reboot is the given script or Bash shell command returns anything other than 0. Will do nothing if value is empty. Note that this command should be able to be executed quickly, and repeatedly, as the conditional reboot may continually run this command every minute while waiting to reboot. Multiple definitions are allowed.  </p> <pre><code>PREVENT_IF_SCRIPT_FAILS=\"! [[ -f /tmp/my_service.lock ]]\"\nPREVENT_IF_SCRIPT_FAILS=\"/usr/local/bin/safe_to_reboot.sh\"\n</code></pre>"},{"location":"#pre_shutdown_command","title":"PRE_SHUTDOWN_COMMAND","text":"<p>Default: nothing When set, this script or Bash shell command will run just prior to the <code>shutdown</code> command. The <code>shutdown</code> command will commence regardess of the exit code of this command. Multiple definitions are allowed.  </p> <pre><code>PRE_SHUTDOWN_COMMAND=\"killall -9 troublesome_processes\"\nPRE_SHUTDOWN_COMMAND=\"/usr/local/bin/send_notifications\"\n</code></pre>"},{"location":"#debugging","title":"Debugging","text":"<p>To enable debug messages, set <code>DEBUG=1</code>.</p> <pre><code>DEBUG=1 coreboot --daemon\n</code></pre> <p>To prevent trigging the <code>shutdown</code> command and any <code>PRE_SHUTDOWN_COMMAND</code>s, set <code>MOCK=1</code>.</p> <pre><code>MOCK=1 coreboot --daemon\n</code></pre>"},{"location":"#author-and-copyright","title":"Author and Copyright","text":"<p>Written by Nathan Collins (npcollins/gmail/com)  </p> <p>Copyright \u00a9 2020 Michigan State University Board of Trustees  </p>"},{"location":"#license","title":"License","text":"<p>Released under the MIT License</p>"}]}